To ensure the robustness and correctness of the `ECDSA` library, we need to define a set of test invariants that cover various edge cases for each functionality provided by the contract. Here are the test invariants for the `ECDSA` library:

### Custom Errors
1. **InvalidSignature Error**:
   - Ensure that the `InvalidSignature` error is thrown when an invalid signature is provided to any of the `recover` functions.

### Recovery Operations
1. **recover(bytes32 hash, bytes memory signature) -> address**:
   - **Valid Signature**: Ensure that a valid `(r, s, v)` or `(r, vs)` signature correctly recovers the signer's address.
   - **Invalid Signature Length**: Ensure that a signature with an invalid length (not 64 or 65 bytes) reverts with `InvalidSignature`.
   - **Invalid Signature Values**: Ensure that invalid `r`, `s`, or `v` values in the signature revert with `InvalidSignature`.

2. **recoverCalldata(bytes32 hash, bytes calldata signature) -> address**:
   - **Valid Signature**: Ensure that a valid `(r, s, v)` or `(r, vs)` signature in calldata correctly recovers the signer's address.
   - **Invalid Signature Length**: Ensure that a signature with an invalid length (not 64 or 65 bytes) in calldata reverts with `InvalidSignature`.
   - **Invalid Signature Values**: Ensure that invalid `r`, `s`, or `v` values in the signature in calldata revert with `InvalidSignature`.

3. **recover(bytes32 hash, bytes32 r, bytes32 vs) -> address**:
   - **Valid Signature**: Ensure that a valid EIP-2098 short form signature correctly recovers the signer's address.
   - **Invalid Signature Values**: Ensure that invalid `r` or `vs` values revert with `InvalidSignature`.

4. **recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) -> address**:
   - **Valid Signature**: Ensure that a valid `(v, r, s)` signature correctly recovers the signer's address.
   - **Invalid Signature Values**: Ensure that invalid `v`, `r`, or `s` values revert with `InvalidSignature`.

### Try-Recover Operations
1. **tryRecover(bytes32 hash, bytes memory signature) -> address**:
   - **Valid Signature**: Ensure that a valid `(r, s, v)` or `(r, vs)` signature correctly recovers the signer's address.
   - **Invalid Signature Length**: Ensure that a signature with an invalid length (not 64 or 65 bytes) returns the zero address.
   - **Invalid Signature Values**: Ensure that invalid `r`, `s`, or `v` values in the signature return the zero address.

2. **tryRecoverCalldata(bytes32 hash, bytes calldata signature) -> address**:
   - **Valid Signature**: Ensure that a valid `(r, s, v)` or `(r, vs)` signature in calldata correctly recovers the signer's address.
   - **Invalid Signature Length**: Ensure that a signature with an invalid length (not 64 or 65 bytes) in calldata returns the zero address.
   - **Invalid Signature Values**: Ensure that invalid `r`, `s`, or `v` values in the signature in calldata return the zero address.

3. **tryRecover(bytes32 hash, bytes32 r, bytes32 vs) -> address**:
   - **Valid Signature**: Ensure that a valid EIP-2098 short form signature correctly recovers the signer's address.
   - **Invalid Signature Values**: Ensure that invalid `r` or `vs` values return the zero address.

4. **tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) -> address**:
   - **Valid Signature**: Ensure that a valid `(v, r, s)` signature correctly recovers the signer's address.
   - **Invalid Signature Values**: Ensure that invalid `v`, `r`, or `s` values return the zero address.

### Hashing Operations
1. **toEthSignedMessageHash(bytes32 hash) -> bytes32**:
   - **Correct Hash**: Ensure that the function correctly produces the Ethereum Signed Message hash for a given `hash`.

2. **toEthSignedMessageHash(bytes memory s) -> bytes32**:
   - **Correct Hash**: Ensure that the function correctly produces the Ethereum Signed Message hash for a given byte array `s`.
   - **Maximum Length**: Ensure that the function handles the maximum length of `s` (999999 bytes) correctly.

### Empty Calldata Helpers
1. **emptySignature() -> bytes calldata**:
   - **Empty Signature**: Ensure that the function returns an empty calldata `bytes`.

### Summary
These test invariants cover the edge cases for each functionality provided by the `ECDSA` library. They ensure that the library correctly handles valid and invalid inputs, reverts with appropriate errors when necessary, and returns the expected results.