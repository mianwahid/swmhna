The provided smart contract is a library for managing a min-heap in Solidity. A min-heap is a binary tree where the parent node is always less than or equal to its child nodes. This library provides various functionalities to interact with and manipulate the heap. Below is a detailed explanation of each functionality:

### Custom Errors
1. **HeapIsEmpty()**
   - This error is thrown when an operation that requires the heap to be non-empty is attempted on an empty heap.

### Structs
2. **Heap**
   - Represents a heap stored in contract storage.
   - Contains a single field `data` which is an array of `uint256` values.

3. **MemHeap**
   - Represents a heap stored in memory.
   - Contains a single field `data` which is an array of `uint256` values.

### Operations
4. **root(Heap storage heap)**
   - Returns the minimum value of the heap stored in contract storage.
   - Reverts with `HeapIsEmpty()` if the heap is empty.

5. **root(MemHeap memory heap)**
   - Returns the minimum value of the heap stored in memory.
   - Reverts with `HeapIsEmpty()` if the heap is empty.

6. **reserve(MemHeap memory heap, uint256 minimum)**
   - Reserves at least `minimum` slots of memory for the heap.
   - Helps avoid reallocation if the maximum size of the heap is known in advance.

7. **smallest(Heap storage heap, uint256 k)**
   - Returns an array of the `k` smallest items in the heap stored in contract storage, sorted in ascending order.
   - If the heap has less than `k` items, all items in the heap are returned.

8. **smallest(MemHeap memory heap, uint256 k)**
   - Returns an array of the `k` smallest items in the heap stored in memory, sorted in ascending order.
   - If the heap has less than `k` items, all items in the heap are returned.

9. **length(Heap storage heap)**
   - Returns the number of items in the heap stored in contract storage.

10. **length(MemHeap memory heap)**
    - Returns the number of items in the heap stored in memory.

11. **push(Heap storage heap, uint256 value)**
    - Pushes the `value` onto the min-heap stored in contract storage.

12. **push(MemHeap memory heap, uint256 value)**
    - Pushes the `value` onto the min-heap stored in memory.

13. **pop(Heap storage heap)**
    - Pops the minimum value from the min-heap stored in contract storage.
    - Reverts with `HeapIsEmpty()` if the heap is empty.

14. **pop(MemHeap memory heap)**
    - Pops the minimum value from the min-heap stored in memory.
    - Reverts with `HeapIsEmpty()` if the heap is empty.

15. **pushPop(Heap storage heap, uint256 value)**
    - Pushes the `value` onto the min-heap stored in contract storage and pops the minimum value.

16. **pushPop(MemHeap memory heap, uint256 value)**
    - Pushes the `value` onto the min-heap stored in memory and pops the minimum value.

17. **replace(Heap storage heap, uint256 value)**
    - Pops the minimum value and pushes the new `value` onto the min-heap stored in contract storage.
    - Reverts with `HeapIsEmpty()` if the heap is empty.

18. **replace(MemHeap memory heap, uint256 value)**
    - Pops the minimum value and pushes the new `value` onto the min-heap stored in memory.
    - Reverts with `HeapIsEmpty()` if the heap is empty.

19. **enqueue(Heap storage heap, uint256 value, uint256 maxLength)**
    - Pushes the `value` onto the min-heap stored in contract storage and pops the minimum value if the length of the heap exceeds `maxLength`.
    - Reverts if `maxLength` is zero.
    - Returns a tuple `(success, hasPopped, popped)` indicating the status of the operation.

20. **enqueue(MemHeap memory heap, uint256 value, uint256 maxLength)**
    - Pushes the `value` onto the min-heap stored in memory and pops the minimum value if the length of the heap exceeds `maxLength`.
    - Reverts if `maxLength` is zero.
    - Returns a tuple `(success, hasPopped, popped)` indicating the status of the operation.

### Private Helpers
21. **_set(Heap storage heap, uint256 value, uint256 maxLength, uint256 mode)**
    - A private helper function for heap operations in contract storage.
    - Handles various modes of operation such as push, pop, replace, pushPop, and enqueue.
    - Returns a tuple `(status, popped)` indicating the status of the operation and the popped value if applicable.

22. **_set(MemHeap memory heap, uint256 value, uint256 maxLength, uint256 mode)**
    - A private helper function for heap operations in memory.
    - Handles various modes of operation such as push, pop, replace, pushPop, and enqueue.
    - Returns a tuple `(status, popped)` indicating the status of the operation and the popped value if applicable.

### Summary
This library provides a comprehensive set of functionalities for managing a min-heap in both contract storage and memory. It includes operations for pushing, popping, replacing, and querying the heap, as well as utility functions for reserving memory and retrieving the smallest elements. The library also includes custom error handling and private helper functions to streamline heap operations.