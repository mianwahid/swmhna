To ensure the correctness and robustness of the `Base64` library, we need to define a set of test invariants that cover various edge cases for each functionality provided by the contract. Here are the test invariants for the `Base64` library:

### Invariants for `encode(bytes memory data, bool fileSafe, bool noPadding)`

1. **Empty Input:**
   - **Invariant:** Encoding an empty byte array should return an empty string.
   - **Test Case:** `encode("", false, false) == ""`

2. **Single Byte Input:**
   - **Invariant:** Encoding a single byte should produce a 2-character Base64 string with padding.
   - **Test Case:** `encode("f", false, false) == "Zg=="`

3. **Two Bytes Input:**
   - **Invariant:** Encoding two bytes should produce a 3-character Base64 string with padding.
   - **Test Case:** `encode("fo", false, false) == "Zm8="`

4. **Three Bytes Input:**
   - **Invariant:** Encoding three bytes should produce a 4-character Base64 string without padding.
   - **Test Case:** `encode("foo", false, false) == "Zm9v"`

5. **File Safe Encoding:**
   - **Invariant:** File safe encoding should replace '+' with '-' and '/' with '_'.
   - **Test Case:** `encode("foo", true, false) == "Zm9v"`

6. **No Padding:**
   - **Invariant:** Encoding with no padding should not include '=' characters.
   - **Test Case:** `encode("fo", false, true) == "Zm8"`

7. **File Safe and No Padding:**
   - **Invariant:** File safe encoding with no padding should replace '+' with '-' and '/' with '_' and exclude '=' characters.
   - **Test Case:** `encode("fo", true, true) == "Zm8"`

### Invariants for `encode(bytes memory data)`

1. **Default Encoding:**
   - **Invariant:** Default encoding should be equivalent to `encode(data, false, false)`.
   - **Test Case:** `encode("foo") == encode("foo", false, false)`

### Invariants for `encode(bytes memory data, bool fileSafe)`

1. **File Safe Encoding:**
   - **Invariant:** Encoding with fileSafe should be equivalent to `encode(data, fileSafe, false)`.
   - **Test Case:** `encode("foo", true) == encode("foo", true, false)`

### Invariants for `decode(string memory data)`

1. **Empty Input:**
   - **Invariant:** Decoding an empty string should return an empty byte array.
   - **Test Case:** `decode("") == ""`

2. **Single Byte Decoding:**
   - **Invariant:** Decoding a 2-character Base64 string with padding should return the original single byte.
   - **Test Case:** `decode("Zg==") == "f"`

3. **Two Bytes Decoding:**
   - **Invariant:** Decoding a 3-character Base64 string with padding should return the original two bytes.
   - **Test Case:** `decode("Zm8=") == "fo"`

4. **Three Bytes Decoding:**
   - **Invariant:** Decoding a 4-character Base64 string without padding should return the original three bytes.
   - **Test Case:** `decode("Zm9v") == "foo"`

5. **File Safe Decoding:**
   - **Invariant:** Decoding a file safe Base64 string should return the original bytes.
   - **Test Case:** `decode("Zm9v") == "foo"`

6. **Non-Padded Decoding:**
   - **Invariant:** Decoding a non-padded Base64 string should return the original bytes.
   - **Test Case:** `decode("Zm8") == "fo"`

7. **Invalid Input Handling:**
   - **Invariant:** Decoding an invalid Base64 string should not revert but produce undefined behavior.
   - **Test Case:** `decode("invalid")` should not revert but the output is undefined.

### Summary
These invariants ensure that the `Base64` library correctly handles various edge cases for encoding and decoding operations. By testing these invariants, we can verify the correctness and robustness of the library's implementation.