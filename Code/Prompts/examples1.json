  [
      {"input": "pragma solidity 0.8.18;\n\ncontract Storage {\n    uint256 public slot0 = 10;\n    uint256 public slot1 = 20;\n}",
        "output": "pragma solidity 0.8.18;\nimport {Test, console2} from \"forge-std/Test.sol\";\nimport {Storage} from \"../myfilename/Storage.sol\";\n\ncontract StoreTest is Test {\n   Storage store;\n\n    function setUp() public {\n        store = new Storage();\n    }\n\n    function testStore() public {\n        assertEq(store.slot0(), 10, \"initial value for slot 0 is incorrect\");\n        assertEq(store.slot1(), 20, \"initial value for slot 1 is incorrect\");\n\n        vm.store(address(store), bytes32(0), bytes32(uint256(1)));\n        assertEq(store.slot0(), 1, \"store failed\");\n        assertEq(store.slot1(), 20, \"store failed\");\n    }\n\n    function testStoreNotAvailableOnPrecompiles() public {\n        assertEq(store.slot0(), 10, \"initial value for slot 0 is incorrect\");\n        assertEq(store.slot1(), 20, \"initial value for slot 1 is incorrect\");\n\n        vm.expectRevert(bytes(\"cannot call `store` on precompile 0x0000000000000000000000000000000000000001\"));\n        this._store(address(1), bytes32(0), bytes32(uint256(1)));\n    }\n\n    function _store(address target, bytes32 slot, bytes32 value) public {\n        vm.store(target, slot, value);\n    }\n\n    function testStoreFuzzed(uint256 slot0, uint256 slot1) public {\n        assertEq(store.slot0(), 10, \"initial value for slot 0 is incorrect\");\n        assertEq(store.slot1(), 20, \"initial value for slot 1 is incorrect\");\n\n        vm.store(address(store), bytes32(0), bytes32(slot0));\n        vm.store(address(store), bytes32(uint256(1)), bytes32(slot1));\n        assertEq(store.slot0(), slot0, \"store failed\");\n        assertEq(store.slot1(), slot1, \"store failed\");\n    }\n}"},

    {"input": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity 0.8.18;\n\ncontract Foo {\n    function f() external view returns (uint256) {\n        return 1;\n    }\n}\n",
        "output": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity ^0.8.18;//This version should be same as of input contract\npragma abicoder v2;\nimport { Test, console2 } from \"forge-std/Test.sol\";\nimport { Foo } from \"../myfilename/Foo.sol\";\n\ncontract SetNonceTest is Test {\n      Foo public foo;\n\n    function setUp() public {\n        foo = new Foo();\n    }\n\n    function testSetNonce() public {\n        vm.setNonce(address(foo), 10);\n        // makes sure working correctly after mutating nonce.\n        foo.f();\n        assertEq(vm.getNonce(address(foo)), 10);\n        foo.f();\n    }\n\n    function testFailInvalidNonce() public {\n        vm.setNonce(address(foo), 10);\n        // set lower nonce should fail\n        vm.setNonce(address(foo), 5);\n    }\n}\n"},
         {
           "input": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;\n\ncontract Foo {\n    function f() external view returns (uint256) {\n        return 1;\n    }\n}\n",
        "output": "// SPDX-License-Identifier: MIT OR Apache-2.0\npragma solidity >=0.8.0;//This version should be same as of input contract\npragma abicoder v2;\n\nimport {  Test, console2 } from \"forge-std/Test.sol\";\nimport { Foo } from \"../myfilename/Foo.sol\";\n\ncontract ResetNonceTest is Test {\n    Foo public fooContract;\n    address barEOA;\n\n    function setUp() public {\n        fooContract = new Foo();\n        barEOA = address(0x42);\n    }\n\n    function testResetNonceContract() public {\n        // No need to initialize Vm as per the requirement.\n\n        vm.setNonce(address(fooContract), 10);\n\n        // makes sure working correctly after mutating nonce.\n        fooContract.f();\n        assertEq(vm.getNonce(address(fooContract)), 10);\n        fooContract.f();\n\n        // now make sure that it is reset after calling the cheatcode.\n        vm.resetNonce(address(fooContract));\n        assertEq(vm.getNonce(address(fooContract)), 1);\n        fooContract.f();\n    }\n\n    function testResetNonceEOA() public {\n        // No need to initialize Vm as per the requirement.\n\n        vm.setNonce(address(barEOA), 10);\n        assertEq(vm.getNonce(address(barEOA)), 10);\n        vm.resetNonce(address(barEOA));\n        assertEq(vm.getNonce(address(barEOA)), 0);\n    }\n}\n"},

    {"input": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\ncontract Safe {\n    receive() external payable {}\n\n    function withdraw() external {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n}",
        "output": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;//This version should be same as of input contract\n\npragma abicoder v2;\nimport {Test, console2} from \"forge-std/Test.sol\";\nimport {Safe} from \"../myfilename/Safe.sol\";\n\ncontract SafeTest is Test {\n    Safe safe;\n\n    // Needed so the test contract itself can receive ether\n    // when withdrawing\n    receive() external payable {}\n\n    function setUp() public {\n        safe = new Safe();\n    }\n\n    function testFuzz_Withdraw(uint256 amount) public {\n        payable(address(safe)).transfer(amount);\n        uint256 preBalance = address(this).balance;\n        safe.withdraw();\n        uint256 postBalance = address(this).balance;\n        assertEq(preBalance + amount, postBalance);\n    }\n}"},

      {"input": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;\n\ncontract Counter {\n    uint256 public number;\n\n    function setNumber(uint256 newNumber) public {\n        number = newNumber;\n    }\n\n    function increment() public {\n        number++;\n    }\n}",
        "output": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.13;//This version should be same as of input contract\npragma abicoder v2;\n\nimport {Test, console2} from \"forge-std/Test.sol\";\nimport {Counter} from \"../myfilename/Counter.sol\";\n\ncontract CounterTest is Test {\n    Counter public counter;\n\n    function setUp() public {\n        counter = new Counter();\n        counter.setNumber(0);\n    }\n\n    function testFuzz_SetNumber(uint256 x) public {\n        counter.setNumber(x);\n        assertEq(counter.number(), x);\n    }\n}"}
 ]