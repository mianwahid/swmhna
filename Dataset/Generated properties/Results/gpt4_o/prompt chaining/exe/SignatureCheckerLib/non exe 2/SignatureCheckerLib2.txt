To ensure the robustness and correctness of the `SignatureCheckerLib` library, we need to define a comprehensive set of test invariants. These invariants will cover various edge cases and scenarios for each functionality provided by the library. Below is a list of test invariants for each function:

### 1. `isValidSignatureNow(address signer, bytes32 hash, bytes memory signature)`

- **Invariant 1**: Valid ECDSA signature should return `true`.
- **Invariant 2**: Invalid ECDSA signature should return `false`.
- **Invariant 3**: Valid EIP-2098 signature should return `true`.
- **Invariant 4**: Invalid EIP-2098 signature should return `false`.
- **Invariant 5**: Valid ERC1271 signature should return `true`.
- **Invariant 6**: Invalid ERC1271 signature should return `false`.
- **Invariant 7**: Signature with incorrect length should return `false`.
- **Invariant 8**: Signature with dirty upper 96 bits in `signer` should be cleaned and validated correctly.

### 2. `isValidSignatureNowCalldata(address signer, bytes32 hash, bytes calldata signature)`

- **Invariant 1**: Valid ECDSA signature should return `true`.
- **Invariant 2**: Invalid ECDSA signature should return `false`.
- **Invariant 3**: Valid EIP-2098 signature should return `true`.
- **Invariant 4**: Invalid EIP-2098 signature should return `false`.
- **Invariant 5**: Valid ERC1271 signature should return `true`.
- **Invariant 6**: Invalid ERC1271 signature should return `false`.
- **Invariant 7**: Signature with incorrect length should return `false`.
- **Invariant 8**: Signature with dirty upper 96 bits in `signer` should be cleaned and validated correctly.

### 3. `isValidSignatureNow(address signer, bytes32 hash, bytes32 r, bytes32 vs)`

- **Invariant 1**: Valid EIP-2098 signature should return `true`.
- **Invariant 2**: Invalid EIP-2098 signature should return `false`.
- **Invariant 3**: Valid ERC1271 signature should return `true`.
- **Invariant 4**: Invalid ERC1271 signature should return `false`.
- **Invariant 5**: Signature with dirty upper 96 bits in `signer` should be cleaned and validated correctly.

### 4. `isValidSignatureNow(address signer, bytes32 hash, uint8 v, bytes32 r, bytes32 s)`

- **Invariant 1**: Valid ECDSA signature should return `true`.
- **Invariant 2**: Invalid ECDSA signature should return `false`.
- **Invariant 3**: Valid ERC1271 signature should return `true`.
- **Invariant 4**: Invalid ERC1271 signature should return `false`.
- **Invariant 5**: Signature with dirty upper 96 bits in `signer` should be cleaned and validated correctly.

### 5. `isValidERC1271SignatureNow(address signer, bytes32 hash, bytes memory signature)`

- **Invariant 1**: Valid ERC1271 signature should return `true`.
- **Invariant 2**: Invalid ERC1271 signature should return `false`.
- **Invariant 3**: Signature with incorrect length should return `false`.

### 6. `isValidERC1271SignatureNowCalldata(address signer, bytes32 hash, bytes calldata signature)`

- **Invariant 1**: Valid ERC1271 signature should return `true`.
- **Invariant 2**: Invalid ERC1271 signature should return `false`.
- **Invariant 3**: Signature with incorrect length should return `false`.

### 7. `isValidERC1271SignatureNow(address signer, bytes32 hash, bytes32 r, bytes32 vs)`

- **Invariant 1**: Valid EIP-2098 signature should return `true`.
- **Invariant 2**: Invalid EIP-2098 signature should return `false`.
- **Invariant 3**: Valid ERC1271 signature should return `true`.
- **Invariant 4**: Invalid ERC1271 signature should return `false`.

### 8. `isValidERC1271SignatureNow(address signer, bytes32 hash, uint8 v, bytes32 r, bytes32 s)`

- **Invariant 1**: Valid ECDSA signature should return `true`.
- **Invariant 2**: Invalid ECDSA signature should return `false`.
- **Invariant 3**: Valid ERC1271 signature should return `true`.
- **Invariant 4**: Invalid ERC1271 signature should return `false`.

### 9. `toEthSignedMessageHash(bytes32 hash)`

- **Invariant 1**: The returned hash should match the expected Ethereum Signed Message hash for the given input hash.

### 10. `toEthSignedMessageHash(bytes memory s)`

- **Invariant 1**: The returned hash should match the expected Ethereum Signed Message hash for the given input bytes.
- **Invariant 2**: The function should handle input lengths up to 999999 bytes correctly.
- **Invariant 3**: The function should throw an error if the header length exceeds 32 bytes.

### 11. `emptySignature()`

- **Invariant 1**: The returned `bytes` array should be empty.

### Summary

These test invariants cover a wide range of edge cases and scenarios for each function in the `SignatureCheckerLib` library. By implementing these invariants in your test suite, you can ensure that the library functions correctly and securely under various conditions.