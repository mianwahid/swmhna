The provided smart contract is an abstract contract named `Initializable` designed to manage the initialization process of upgradeable contracts. Below is a detailed explanation of each functionality within the contract:

### Custom Errors
1. **`InvalidInitialization`**:
   - This error is thrown when an attempt is made to initialize the contract in an invalid state, such as when the contract is already initialized.

2. **`NotInitializing`**:
   - This error is thrown when a function that requires the contract to be in the initializing state is called, but the contract is not in that state.

### Events
1. **`Initialized(uint64 version)`**:
   - This event is emitted when the contract has been successfully initialized. The `version` parameter indicates the version of the initialization.

### Storage
1. **`_INITIALIZABLE_SLOT`**:
   - This constant defines the storage slot used to store the initialization state of the contract. The slot is calculated using a specific hash to avoid conflicts with other storage variables.
   - The storage slot layout:
     - Bit 0: `initializing` flag (1 if the contract is initializing, 0 otherwise).
     - Bits 1-64: `initializedVersion` (the version of the initialization).

### Operations
1. **`_initializableSlot()`**:
   - This internal function returns the storage slot used for initialization. It can be overridden to return a custom slot if needed.

2. **`initializer` Modifier**:
   - This modifier ensures that a function can only be called once for initialization. It sets the `initializing` flag and the `initializedVersion` to 1.
   - If the contract is already initialized, it reverts with `InvalidInitialization`.
   - After the function execution, it resets the `initializing` flag and emits the `Initialized` event with version 1.

3. **`reinitializer(uint64 version)` Modifier**:
   - This modifier allows a function to be called once for reinitialization with a specific version.
   - It sets the `initializing` flag and updates the `initializedVersion` to the provided version.
   - If the contract is already initialized to a version greater than or equal to the provided version, it reverts with `InvalidInitialization`.
   - After the function execution, it resets the `initializing` flag and emits the `Initialized` event with the provided version.

4. **`onlyInitializing` Modifier**:
   - This modifier ensures that a function can only be called during the initialization process. It calls `_checkInitializing` to verify the state.

5. **`_checkInitializing()`**:
   - This internal function checks if the contract is currently initializing. If not, it reverts with `NotInitializing`.

6. **`_disableInitializers()`**:
   - This internal function locks any future initializations by setting the `initializedVersion` to the maximum value (`2**64 - 1`).
   - It is recommended to call this function in the constructor to prevent the contract from being initialized or reinitialized, especially for implementation contracts designed to be called through proxies.
   - It emits the `Initialized` event the first time it is successfully called.

7. **`_getInitializedVersion()`**:
   - This internal function returns the highest version that has been initialized. It reads the `initializedVersion` from the storage slot.

8. **`_isInitializing()`**:
   - This internal function returns whether the contract is currently in the initializing state. It reads the `initializing` flag from the storage slot.

### Summary
The `Initializable` contract provides a robust framework for managing the initialization and reinitialization of upgradeable contracts. It ensures that initialization functions are called only once, supports versioned reinitialization, and provides mechanisms to lock the contract against future initializations. The use of custom errors and events enhances the clarity and traceability of the initialization process.